package com.shuffle.scplayer.jna;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class SpZeroConfVars extends Structure {
	/** C type : char[0x96] */
	public byte[] publicKey = new byte[0x96];
	/** C type : char[0x40] */
	public byte[] deviceId = new byte[0x40];
	/** C type : char[0x40] */
	public byte[] activeUser = new byte[0x40];
	/** C type : char[0x40] */
	public byte[] remoteName = new byte[0x40];
	/** C type : char[0x10] */
	public byte[] accountReq = new byte[0x10];
	/** C type : char[0x10] */
	public byte[] deviceType = new byte[0x10];
	public SpZeroConfVars() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("publicKey", "deviceId", "activeUser", "remoteName", "accountReq", "deviceType");
	}
	/**
	 * @param publicKey C type : char[0x96]<br>
	 * @param deviceId C type : char[0x40]<br>
	 * @param activeUser C type : char[0x40]<br>
	 * @param remoteName C type : char[0x40]<br>
	 * @param accountReq C type : char[0x10]<br>
	 * @param deviceType C type : char[0x10]
	 */
	public SpZeroConfVars(byte publicKey[], byte deviceId[], byte activeUser[], byte remoteName[], byte accountReq[], byte deviceType[]) {
		super();
		if ((publicKey.length != this.publicKey.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.publicKey = publicKey;
		if ((deviceId.length != this.deviceId.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.deviceId = deviceId;
		if ((activeUser.length != this.activeUser.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.activeUser = activeUser;
		if ((remoteName.length != this.remoteName.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.remoteName = remoteName;
		if ((accountReq.length != this.accountReq.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.accountReq = accountReq;
		if ((deviceType.length != this.deviceType.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.deviceType = deviceType;
	}
	public SpZeroConfVars(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends SpZeroConfVars implements Structure.ByReference {
		
	};
	public static class ByValue extends SpZeroConfVars implements Structure.ByValue {
		
	};
}
