package com.shuffle.scplayer.jna;
import com.sun.jna.Callback;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class SpConfig extends Structure {
	public int version;
	/** C type : uint8_t* */
	public Pointer buffer;
	public NativeLong buffer_size;
	/** C type : uint8_t* */
	public Pointer app_key;
	public NativeLong app_key_size;
	/** C type : char* */
	public Pointer deviceId;
	/** C type : char* */
	public Pointer remoteName;
	/** C type : char* */
	public Pointer brandName;
	/** C type : char* */
	public Pointer modelName;
	public int deviceType;
	/** C type : error_callback_callback* */
	public SpConfig.error_callback_callback error_callback;
	/** C type : void* */
	public Pointer userdata;
	public interface error_callback_callback extends Callback {
		void apply(int error, Pointer userdata);
	};
	public SpConfig() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("version", "buffer", "buffer_size", "app_key", "app_key_size", "deviceId", "remoteName", "brandName", "modelName", "deviceType", "error_callback", "userdata");
	}
	public SpConfig(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends SpConfig implements Structure.ByReference {
		
	};
	public static class ByValue extends SpConfig implements Structure.ByValue {
		
	};
}
